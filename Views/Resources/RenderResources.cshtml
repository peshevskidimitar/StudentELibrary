@model StudentELibrary.Models.ResourceSearchModel

@{
    if (Model.TotalPages > 0)
    {
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
        @foreach (var item in Model.Resources)
        {
            <div class="col">
                <div class="card h-100">
                    <img src="@item.ImageURL" class="card-img-top" alt="...">
                    <div class="card-body">
                        <h5 class="card-title">@item.Title</h5>
                        <p class="card-text small">
                            @{
                                if (item.Description.Length > 150)
                                {
                                    var description = item.Description.Substring(0, 150);
                                    <span>@description ...</span>
                                }
                                else
                                {
                                    <span>@item.Description</span>
                                }
                            }
                        </p>
                        <p class="card-text">
                            @Html.ActionLink("Повеќе", "Details", new { id = item.Id }, new { @class = "" })
                        </p>
                    </div>
                    <div class="card-footer">
                        @if (Request.IsAuthenticated)
                        {
                            <div class="btn-group btn-group-sm m-1" role="group">
                                @Html.ActionLink("Додади во бибилиотека", "AddToLibrary", "Libraries", new { id = item.Id }, new { @class = "btn btn-outline-primary shadow-none text-uppercase", style = "font-size: x-small;" })
                            </div>
                        }
                        <div class="btn-group btn-group-sm m-1" role="group">
                            @Html.ActionLink("Преземи", "DownloadFile", "Resources", new { fileName = item.FileName, title = string.Concat(item.Title, Path.GetExtension(item.FileName)) }, new { @class = "btn btn-outline-primary shadow-none text-uppercase", style = "font-size: x-small;" })
                        </div>
                        @if (User.IsInRole("Administrator") || User.IsInRole("Teacher"))
                        {
                            <div class="btn-group btn-group-sm m-1" role="group">
                                @Html.ActionLink("Промени", "Edit", "Resources", new { id = item.Id }, new { @class = "btn btn-outline-primary shadow-none text-uppercase", style = "font-size: x-small;" })
                                <a class="btn btn-outline-primary shadow-none text-uppercase delete-btn" js-item-id="@item.Id" style="font-size: x-small;">Избриши</a>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
        <nav aria-label="..." class="mt-3">
            <ul class="pagination justify-content-end">
                <li class="page-item" id="previous">
                    <a class="page-link shadow-none" tabindex="-1" aria-disabled="true" href="#resources">Претходна</a>
                </li>
                @{
                    for (int i = 0; i < Model.TotalPages; ++i)
                    {
                        if (i + 1 == Model.PageNumber)
                        {
                            <li class="page-item page-number active" js-data-page="@(i+1)"><a class="page-link shadow-none" href="#resources">@(i + 1)</a></li>
                        }
                        else
                        {
                            <li class="page-item page-number" js-data-page="@(i+1)"><a class="page-link shadow-none" href="#resources">@(i + 1)</a></li>
                        }
                    }
                }
                <li class="page-item" id="next-page">
                    <a class="page-link shadow-none" href="#resources">Следна</a>
                </li>
            </ul>
        </nav>
    }
    else
    {
        <div>
            <p class="text-uppercase text-center my-5">Не се пронајдени ресурси.</p>
        </div>
    }
}

<script>
    function serializeForm() {
        let data = {}
        $("#main-form").serializeArray().map(function (x) { if (data[x.name] == null) { data[x.name] = x.value; } });
        return data;
    }

    function createAjaxCall(data) {
        $.ajax({
            url: '/Resources/RenderResources/',
            type: 'POST',
            data: data,
            beforeSend: function () {
                $("#partialView").empty();
                $("#loader").removeClass("d-none");
            },
            error: function (err) {
                console.log(err);
            },
        }).done(function (result) {
            setTimeout(function () {
                $("#loader").addClass("d-none");
                $("#partialView").empty();
                $("#partialView").append(result);
            }, 250)
        })
    }

    $(document).ready(() => {
        $(".delete-btn").on('click', function () {
            $.ajax({
                url: "/Resources/Delete/" + $(this).attr("js-item-id"),
                type: 'GET',
                success: function (result) {
                    $("#deleteView").html(result);
                    var modal = new bootstrap.Modal(document.getElementById("staticBackdrop"));
                    modal.toggle();
                },
                error: function (err) {
                    console.log(err);
                }
            })
        });

        $("#TotalPages").val("@Model.TotalPages");
        $("#PageNumber").val("@Model.PageNumber");

        let data = serializeForm();

        let previous = $('#previous');
        if (data['PageNumber'] === "1")
            previous.addClass("disabled");
        else
            previous.removeClass('disabled');

        previous.on('click', 'a', function () {
            if (!previous.hasClass('disabled')) {
                let data = serializeForm();
                data['PageNumber'] = (parseInt(data['PageNumber']) - 1).toString();
                $("#PageNumber").val(data['PageNumber']);
                createAjaxCall(data);
            }
        })

        let next = $("#next-page");

        if (parseInt(data['PageNumber']) >= parseInt(data['TotalPages']))
            next.addClass("disabled");
        else
            next.removeClass('disabled');

        next.on('click', 'a', function () {
            if (!next.hasClass('disabled')) {
                var data = serializeForm();
                data['PageNumber'] = (parseInt(data['PageNumber']) + 1).toString();
                $("#PageNumber").val(data['PageNumber']);
                createAjaxCall(data);
            }
        })

        $(".page-number").on('click', function () {
            var data = serializeForm();
            data['PageNumber'] = $(this).attr("js-data-page");;
            $("#PageNumber").val(data['PageNumber']);
            createAjaxCall(data);
        });
    });
</script>